/*

Problem statement
You are given a Singly Linked List of integers with a head pointer. Every node of the Linked List has a value written on it.

A sample Linked List
Now you have been given an integer value ‘K’. Your task is to rearrange this linked list such that the following conditions hold true :

1. All nodes that have a value less than ‘K’ must come before the nodes that have a value greater than equal to ‘K’.
2. All nodes must maintain the original relative order as they have present in the original linked list after rearrangement.

*/



/*****************************************************************

    Following is the class structure of the LinkedListNode class:
	
    class LinkedListNode {
	int data;
	LinkedListNode next;

	LinkedListNode(int data) {
		this.data = data;
		this.next = null;
	   }
	}

*****************************************************************/


public class Solution {
    public static LinkedListNode partitionList(LinkedListNode head, int k) {
        if(head == null) {
			return null;
		}
		
		// Create dummy heads for two lists
        LinkedListNode lessThanHead = new LinkedListNode(0);
        LinkedListNode greaterThanHead = new LinkedListNode(0);

        LinkedListNode less = lessThanHead;
        LinkedListNode greater = greaterThanHead;

        LinkedListNode curr = head;

        while (curr != null) {
            if (curr.data < k) {
                less.next = curr;
                less = less.next;
            } else {
                greater.next = curr;
                greater = greater.next;
            }
            curr = curr.next;
        }

        // Connect the two lists
        greater.next = null; // End of greater list
        less.next = greaterThanHead.next; // Join less list with greater list

        return lessThanHead.next; // Skip the dummy head
    }
}

