/*

Problem statement
Given a singly linked list, you have to detect the loop and remove the loop from the linked list, if present. You have to make changes in the given linked list itself and return the updated linked list.
Expected Complexity: Try doing it in O(n) time complexity and O(1) space complexity. Here, n is the number of nodes in the linked list.

----------------------------
*/



/*****************************************************
  
  Following is the structure of Node.
  public static class Node {
    
    int data;
    Node next;

    Node(int data) {
      this . data = data;
      this . next = null;
    }
  }

*****************************************************/

import java.util.ArrayList;

public class Solution {
  public static Node removeLoop(Node head) {
    if(head == null || head.next == null) {
      return head;
    }

    Node fast = head;
    Node slow = head;

    while(fast != null && fast.next != null) {
      fast = fast.next.next;
      slow = slow.next;
      if(fast == slow) {
        break;
      }
    }

    if (slow != fast) {
      return head;
    }

    slow = head;
    if (slow != fast) {
      while (slow.next != fast.next) {
        slow = slow.next;
        fast = fast.next;
      }
    } else {
      while (fast.next != slow) {
        fast = fast.next;
      }
    }
    fast.next = null;

    return head;
  }
}
