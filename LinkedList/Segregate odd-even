/*


Problem statement
There is a wedding ceremony at NinjaLand. The bride and groom want everybody to play a game and thus, they have blindfolded the attendees. The people from the bride’s side are holding odd numbers and people from the groom’s side are holding the even numbers. For the game to start quickly, all the bride’s side people should come first, followed by the groom’s side people in the same order.
The attendees of the wedding with their numbers are given in the form of a Singly Linked List, arranged randomly.
A singly linked list is a type of linked list that is unidirectional; that is, it can be traversed in only one direction from head to the last node (tail).

Example:
The attendees holding numbers from 1, 4, 3 are shown: 
As the organizers are busy, you have to arrange all the people by arranging the bride’s side people first followed by the groom’s side people sequentially.

Note:
For the above example 1 -> 4 -> 3, 1 -> 3 -> 4 is the only correct answer, i.e nodes should be grouped sequentially. Hence, 3 -> 1 -> 4 is the wrong answer as we have to preserve the same order.


*/



/*************************************************************

	Following is the class structure of the Node class:

    class Node {
		public int data;
		public Node next;

		Node(int data) {
			this.data = data;
			this.next = null;
	  	}
    }

*************************************************************/


public class Solution {
	public static Node segregateOddEven(Node head) {
		if (head == null) {
			return null;
		}

		Node evenDummy = new Node(0);
		Node oddDummy = new Node(0);
		Node evenTail = evenDummy;
		Node oddTail = oddDummy;
		Node current = head;

		while (current != null) {
			if (current.data % 2 == 0) {
				evenTail.next = current;
				evenTail = evenTail.next;
			} else {
				oddTail.next = current;
				oddTail = oddTail.next;
			}
			current = current.next;
		}

		// Terminate the even list
		evenTail.next = null;

		// Connect odd list with even list
		oddTail.next = evenDummy.next;

		return oddDummy.next != null ? oddDummy.next : evenDummy.next;
	}
}
