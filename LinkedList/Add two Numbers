/*

Problem statement:
You are given two non-negative numbers 'num1' and 'num2' represented in the form of linked lists.
The digits in the linked lists are stored in reverse order, i.e. starting from least significant digit (LSD) to the most significant digit (MSD), and each of their nodes contains a single digit.
Calculate the sum of the two numbers and return the head of the sum list.

Example :
Input:
'num1' : 1 -> 2 -> 3 -> NULL
'num2' : 4 -> 5 -> 6 -> NULL

Output: 5 -> 7 -> 9 -> NULL

Explanation: 'num1' represents the number 321 and 'num2' represents 654. Their sum is 975.
--------------------------------
*/



import java.util.* ;
import java.io.*; 
/****************************************************************

    Following is the class structure of the Node class:

    class LinkedListNode {
        int data;
        LinkedListNode next;
        
        public LinkedListNode(int data) {
            this.data = data;
        }
    }

*****************************************************************/


public class Solution {
    static LinkedListNode addTwoNumbers(LinkedListNode head1, LinkedListNode head2) {
        // LinkedListNode sum = new LinkedListNode(0);
        // LinkedListNode head = sum;
        // int carry = 0;

        // while(head1 != null && head2 != null) {
        //     int result = head1.data + head2.data + carry;
        //     carry = result / 10;
        //     sum.next = new LinkedListNode(result % 10);

        //     sum = sum.next;
        //     head1 = head1.next;
        //     head2 = head2.next;
        // }

        // while(head1 != null) {
        //     int result = head1.data + carry;
        //     carry = result / 10;
        //     sum.next = new LinkedListNode(result % 10);

        //     sum = sum.next;
        //     head1 = head1.next;
        // }
        // while(head2 != null) {
        //     int result = head2.data + carry;
        //     carry = result / 10;
        //     sum.next = new LinkedListNode(result % 10);

        //     sum = sum.next;
        //     head2 = head2.next;
        // }

        // if(carry != 0) {
        //     sum.next = new LinkedListNode(carry);
        // }

        // return head.next;


        LinkedListNode result = new LinkedListNode(0);
        LinkedListNode head = result;
        int carry = 0;

        while(head1 != null || head2 != null) {
            int sum = carry;

            if(head1 != null) {
                sum += head1.data;
                head1 = head1.next;
            }
            if(head2 != null) {
                sum += head2.data;
                head2 = head2.next;
            }

            carry = sum / 10;
            sum = sum % 10;
            result.next = new LinkedListNode(sum);
            result = result.next;
        }

        if(carry != 0) {
            result.next = new LinkedListNode(carry);
            result = result.next;
        }

        return head.next;
    }
}
