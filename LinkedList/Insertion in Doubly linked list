/*


Problem statement
You are given a Doubly linked list, where every node in the linked list contains two pointers ‘next’ and ‘prev’ which point to the next node and previous node in the list respectively. All nodes have some positive integer value associated with them. Your task is to insert an integer value ‘VAL’ in the linked list at a given position ‘K’.

Note:
The position given will always be less than or equal to the length of the linked list.
Assume that the Indexing for the linked list starts from 0.

EXAMPLE:
Input :
‘K’ = 3, ‘VAL’ = 4
list = [1, 2, 3]
Output: [1, 2, 3, 4]
The ‘VAL’ = 4, is inserted at end of the above doubly linked list.

----------------------------
*/




import java.util.* ;
import java.io.*; 

/************************************************************

 Following is the linkedList class structure:

 class Node<T> {
 T data;
 Node<T> next,prev;

 public Node(T data) {
 this.data = data;
 }
 }

 ************************************************************/

public class Solution {

    static Node insert(int k, int val, Node head) {
        
        if(head == null) {
            return head;
        }

        if(k == 0) {
            Node<Integer> startNode = new Node<>(val);

            startNode.next = head;
            head.prev = startNode;
            head = startNode;

            return head;
        }

        Node<Integer> curr = head;
        while(k > 1 && curr.next != null) {
            curr = curr.next;
            k--;
        }

        Node<Integer> node = new Node<>(val);

        node.next = curr.next;
        node.prev = curr;

        if(curr.next != null) {
            curr.next.prev = node;
        }
        curr.next = node;

        return head;

    }
}
