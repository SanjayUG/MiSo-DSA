/*
Problem statement
You are given a linked list of 'n' nodes and an integer 'k', where 'k' is less than or equal to 'n'.

Your task is to reverse the order of each group of 'k' consecutive nodes, if 'n' is not divisible by 'k', then the last group of nodes should remain unchanged.

For example, if the linked list is 1->2->3->4->5, and 'k' is 3, we have to reverse the first three elements, and leave the last two elements unchanged. Thus, the final linked list being 3->2->1->4->5.

Implement a function that performs this reversal, and returns the head of the modified linked list.

Example:
Input: 'list' = [1, 2, 3, 4], 'k' = 2

Output: 2 1 4 3

Explanation:
We have to reverse the given list 'k' at a time, which is 2 in this case. So we reverse the first 2 elements then the next 2 elements, giving us 2->1->4->3.

Note:
All the node values will be distinct.
*/


import java.util.*;

/****************************************************************

 Following is the class structure of the Node class:

 class Node {
     public int data;
     public Node next;

     Node()
     {
         this.data = 0;
         this.next = null;
     }

     Node(int data)
     {
         this.data = data;
         this.next = null;
     }

     Node(int data, Node next)
     {
         this.data = data;
         this.next = next;
     }
 };

 *****************************************************************/

public class Solution {
    public static Node kReverse(Node head, int k) {
        if (head == null || k == 1) return head;

        Node dummy = new Node(0, head);
        Node prevBlockEnd = dummy;
        Node curr = head;

        while (curr != null) {
            Node blockStart = curr;
            int count = 0;

            // Find the k-th node
            while (count < k && curr != null) {
                curr = curr.next;
                count++;
            }

            // If fewer than k nodes remain, no need to reverse
            if (count == k) {
                // Reverse k nodes
                Node prev = null;
                Node next = null;
                Node tempCurr = blockStart;
                while (count-- > 0) {
                    next = tempCurr.next;
                    tempCurr.next = prev;
                    prev = tempCurr;
                    tempCurr = next;
                }

                // Connect with the previous part
                prevBlockEnd.next = prev;
                blockStart.next = curr;
                prevBlockEnd = blockStart;
            }
        }

        return dummy.next;
    }
}
