/*
Problem statement
You have been given a Binary Tree of 'N' nodes, where the nodes have integer values. Your task is to print the zigzag traversal of the given tree.

Note:
In zigzag order, level 1 is printed from left to right fashion, level 2 is printed from right to left. and level 3 is printed from left to right again, and so onâ€¦..
For example:
For the given binary tree

The zigzag  traversal is [1, 4, 3, 5, 2, 7, 6]


*/



import java.util.*;
/*
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode(T data) {
        this.data = data;
    }
}
*/
public class Solution {
    public static List<Integer> zigZagTraversal(BinaryTreeNode<Integer> root) {
        List<Integer> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }

        Queue<BinaryTreeNode<Integer>> q = new LinkedList<>();
        boolean flag = false;

        q.add(root);

        while (!q.isEmpty()) {
            int size = q.size();

			//act as stack and normal list
            List<Integer> level = new ArrayList<>();

            for (int i = 0; i < size; i++) {
                BinaryTreeNode<Integer> curr = q.poll();

                if (flag) {
                    level.add(0, curr.data);  // Add to the front for zigzag pattern
                } else {
                    level.add(curr.data);
                }

                if (curr.left != null) {
                    q.add(curr.left);
                }
                if (curr.right != null) {
                    q.add(curr.right);
                }
            }

            ans.addAll(level);
            flag = !flag; 
        }

        return ans;
    }
}
