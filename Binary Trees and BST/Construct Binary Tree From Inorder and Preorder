/*
Problem statement
You are given arrays 'inOrder' and 'postOrder', which represent 'inorder' traversal and 'postorder' traversal of a 'Binary Tree' respectively.
Construct a 'Binary Tree' represented by the given arrays and return it's head.

Note:
Assume that the Binary Tree contains only unique elements.

Example:
Input: 'inOrder' = [9, 3, 15, 20, 7], 'postOrder' = [9, 15, 7, 20, 3]

Output:
We get the following binary tree from Inorder and Postorder traversal:


*/



/*********************************************************

 Following is the TreeNode structure:

 class TreeNode {
     int data;
     TreeNode left;
     TreeNode right;
     TreeNode() {
         this.data = 0;
         this.left = null;
         this.right = null;
     }
     TreeNode(int data) {
         this.data = data;
         this.left = null;
         this.right = null;
     }
     TreeNode(int data, TreeNode left, TreeNode right) {
         this.data = data;
         this.left = left;
         this.right = right;
     }
 };
 ********************************************************/

public class Solution {

    static int pindex = 0;
    public static TreeNode buildBinaryTree(int[] inorder, int[] preorder) {
        pindex = 0;
        TreeNode root = buildBinaryTreeUtil(inorder, preorder, 0, inorder.length - 1);
        return root;
    }

    public static TreeNode buildBinaryTreeUtil(int[] inorder, int[] preorder, int start, int end) {
        if(start > end) {
            return null;
        }
        TreeNode curr = new TreeNode(preorder[pindex++]);
        
        int iindex = start;
        while (iindex <= end && inorder[iindex] != curr.data) {
            iindex++;
        }

        curr.left = buildBinaryTreeUtil(inorder, preorder, start, iindex - 1);
        curr.right = buildBinaryTreeUtil(inorder, preorder, iindex + 1, end);

        return curr;
    }
}
