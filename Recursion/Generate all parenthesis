/*
You are given an integer 'N', your task is to generate all combinations of well-formed parenthesis having ‘N’ pairs.
A parenthesis is called well-formed if it is balanced i.e. each left parenthesis has a matching right parenthesis and the matched pairs are well nested.

For Example:
For ‘N’ = 3,
All possible combinations are: 
((()))
(()())
(())()
()(())
()()()


*/



import java.util.*; 
import java.io.*;

public class Solution {    
    public static void util(int n, int open, int close, ArrayList<String> ans, String str) {        
        if (str.length() == 2 * n) {            
            ans.add(str);            
            return;        
        }        
        if (open < n) {            
            util(n, open + 1, close, ans, str + "(");        
        }        
        if (close < open) {            
            util(n, open, close + 1, ans, str + ")");        
        }    
    }    

    public static ArrayList<String> validParenthesis(int n) {                
        ArrayList<String> ans = new ArrayList<>();        
        util(n, 0, 0, ans, "");        
        return ans;    
    } 
}
