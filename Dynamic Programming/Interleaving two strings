/*
Problem statement
You are given three strings 'A', 'B' and 'C'. Check whether 'C' is formed by an interleaving of 'A' and 'B'.

'C' is said to be interleaving 'A' and 'B', if the length of 'C' is equal to the sum of the length of 'A' and length of 'B', all the characters of 'A' and 'B' are present in 'C' and the order of all these characters remains the same in all three strings.

For Example:
If A = “aab”, 'B' = “abc”, 'C' = “aaabbc”
Here 'C' is an interleaving string of 'A' and 'B'. because 'C' contains all the characters of 'A' and 'B' and the order of all these characters is also the same in all three strings.

If 'A' = “abc”, 'B' = “def”, 'C' = “abcdefg”
Here 'C' is not an interleaving string of 'A' and 'B'. 'B'ecause neither A nor 'B' contains the character ‘g’.


*/



import java.util.*;

public class Solution {
    public static boolean isInterleave(String a, String b, String c) {
        int m = a.length();
        int n = b.length();
        int N = c.length();
        
        if(m + n != N) {
            return false;
        }

        boolean dp[][] = new boolean[m + 1][n + 1];

        dp[0][0] = true; // Base case: Empty strings interleave to form an empty string

        // Initialize first column (when a is empty)
        for(int j = 1; j <= n; j++) {
            dp[0][j] = dp[0][j-1] && (b.charAt(j-1) == c.charAt(j-1));
        }

        // Initialize first row (when b is empty)
        for(int i = 1; i <= m; i++) {
            dp[i][0] = dp[i-1][0] && (a.charAt(i-1) == c.charAt(i-1));
        }

        // Fill the rest of the dp table
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                dp[i][j] = (dp[i-1][j] && a.charAt(i-1) == c.charAt(i+j-1)) || 
                           (dp[i][j-1] && b.charAt(j-1) == c.charAt(i+j-1));
            }
        }

        return dp[m][n];
    }
}
