
public class Solution {

	public static int maxMoneyLooted(int[] houses) {
		// if(houses.length == 0) {
		// 	return 0;
		// }
		// if(houses.length == 1) {
		// 	return houses[0];
		// }
		// int dp[] = new int[houses.length];
		// dp[0] = houses[0];
		// dp[1] = Math.max(houses[0], houses[1]);

		// for(int i=2; i<houses.length; i++) {
		// 	dp[i] = Math.max(dp[i-2] + houses[i], dp[i-1]);
		// }

		// return dp[houses.length - 1];

		//--------------------------------------

		if(houses.length == 0) {
			return 0;
		}

		int currRob = 0;
		int prevRob = 0;

		for(int i=0; i<houses.length; i++) {
			int robCurrHouse = prevRob + houses[i];
			int notRobCurrHouse = Math.max(prevRob, currRob);
			currRob = robCurrHouse;
			prevRob = notRobCurrHouse;
		}

		return Math.max(currRob, prevRob);
	}
}
public class Solution {

	public static int maxMoneyLooted(int[] houses) {
		// if(houses.length == 0) {
		// 	return 0;
		// }
		// if(houses.length == 1) {
		// 	return houses[0];
		// }
		// int dp[] = new int[houses.length];
		// dp[0] = houses[0];
		// dp[1] = Math.max(houses[0], houses[1]);

		// for(int i=2; i<houses.length; i++) {
		// 	dp[i] = Math.max(dp[i-2] + houses[i], dp[i-1]);
		// }

		// return dp[houses.length - 1];

		//--------------------------------------

		if(houses.length == 0) {
			return 0;
		}

		int currRob = 0;
		int prevRob = 0;

		for(int i=0; i<houses.length; i++) {
			int robCurrHouse = prevRob + houses[i];
			int notRobCurrHouse = Math.max(prevRob, currRob);
			currRob = robCurrHouse;
			prevRob = notRobCurrHouse;
		}

		return Math.max(currRob, prevRob);
	}
}
