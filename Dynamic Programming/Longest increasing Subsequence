/*
Problem statement
For a given array with N elements, you need to find the length of the longest subsequence from the array such that all the elements of the subsequence are sorted in strictly increasing order.

Strictly Increasing Sequence is when each term in the sequence is larger than the preceding term.

For example:
[1, 2, 3, 4] is a strictly increasing array, while [2, 1, 4, 3] is not.


*/



import java.util.*;
public class Solution {

	public static int longestIncreasingSubsequence(int arr[]) {
		// int n = arr.length;
		// int[] counters = new int[n];

		// //main logic
		// for(int i=1; i<n; i++) {
		// 	for(int j=0; j<i; j++) {
		// 		if(arr[i] > arr[j]) {
		// 			counters[i] = Math.max(counters[i], counters[j] + 1);
		// 		}
		// 	}
		// }

		// //get the max element
		// int maxi = 0;
		// for(int i=1; i<n; i++) {
		// 	if(counters[i] > counters[maxi]) {
		// 		maxi = i;
		// 	}
		// }
		
		// return counters[maxi] + 1;


		int n = arr.length;
		int[] tails = new int[n];
    	int len = 1; // Initialize the length of LIS to 1

    	tails[0] = arr[0]; // Initialize the first element in the tails array

    	for (int i = 1; i < n; i++) {
        	if (arr[i] < tails[0]) {
            	// If the current element is smaller than the smallest element in tails, update tails[0]
            	tails[0] = arr[i];
        	} else if (arr[i] > tails[len - 1]) {
            	// If the current element is greater than the largest element in tails, append it to tails
            	tails[len] = arr[i];
            	len++;
        	} else {	
            	// If the current element is somewhere in between, find the smallest element in tails that is greater than or equal to arr[i]
            	int pos = Arrays.binarySearch(tails, 0, len, arr[i]);
				if (pos < 0) {
                    pos = -(pos + 1);
                }
            	tails[pos] = arr[i];
        	}
    	}

    	return len;
	}
}
