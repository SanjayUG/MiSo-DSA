
/*
--
- create a map of str-List<str>
- iterate to inputStr.
    convert str -> toCharArray()
    Arrays.sort() it
    convert back to str[String.valueOf()]
    if sortedStr dont exist in map {
        put it(sortedStr, str)
    }
    map.get(sortedStr).add(str);

- convert to map to arrlist<arrlist<>>() by map.values()
- return the arrlist<arrlist<>>;

--
*/

import java.util.*;
import java.io.*;

public class Solution {

    public static ArrayList<ArrayList<String>> getGroupedAnagrams(ArrayList<String> inputStr, int n) {
        Map<String, List<String>> group = new HashMap<>();

        for (String str : inputStr) {
            char[] chArr = str.toCharArray();
            Arrays.sort(chArr);
            String sortedStr = String.valueOf(chArr);
            if (!group.containsKey(sortedStr)) {
                group.put(sortedStr, new ArrayList<>());
            }
            group.get(sortedStr).add(str);
        }

        ArrayList<ArrayList<String>> result = new ArrayList<>();
        for (List<String> list : group.values()) {
            result.add(new ArrayList<>(list));
        }
        
        return result;
    }
}

