import java.util.ArrayList;

public class Solution {

    public static boolean isGraphBirpatite(ArrayList<ArrayList<Integer>> edges) {

        int v = edges.size();
        int color[] = new int[v];

        for(int i=0; i<v; i++) {
            color[i] = -1;
        }

        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();

        for(int i=0; i<v; i++) {
            adjList.add(new ArrayList<>());
        }

        for(int i=0; i<v; i++) {
            for(int j=0; j<edges.get(i).size(); j++) {
                if(edges.get(i).get(j) == 1) {
                    adjList.get(i).add(j);
                }
            }
        }

        for(int i=0; i<v; i++) {
            if(color[i] == -1) {
                if(dfs(i, 0, color, adjList) == false) {
                    return false;
                }
            }
        }

        return true;
    }

    public static boolean dfs(int node, int col, int[] color, ArrayList<ArrayList<Integer>> edges) {
        color[node] = col;
        for(Integer adj : edges.get(node)) {
            if(color[adj] == -1) {
                if(dfs(adj, 1-col, color, edges) == false) {
                    return false;
                }
            } else if(color[adj] == col) {
                return false;
            }
        }
        
        return true;
    }
}
