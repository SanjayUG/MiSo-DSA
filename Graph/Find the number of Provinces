/*

Problem statement
You are given ‘n’ cities, some of which are connected by bidirectional roads. You are also given an ‘n x n’ matrix i.e. ‘roads’, where if city ‘i’ and ‘j’ are connected by a road then ‘roads[i][j]'= 1, otherwise ‘roads[i][j]' = 0.

A province is a group of cities that are either directly or indirectly connected to each other through roads.

The goal is to count and return the total number of such provinces in the given matrix.

Example:
n = 4, roads = [ [1, 1, 1, 0],
                 [1, 1, 1, 0],
                 [1, 1, 1, 0],
                 [0, 0, 0, 1] ]

*/



import java.util.ArrayList;

public class Solution {

    public static void dfs(ArrayList<ArrayList<Integer>> adjList, int[] visited, int i) {
        visited[i] = 1;
        
        for(int it : adjList.get(i)) {
            if(visited[it] == 0) {
                dfs(adjList, visited, it);
            }
        }
    }
    public static int findNumOfProvinces(int[][] roads, int n) {
        

        int count = 0;
        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();
        int[] visited = new int[n];
        for(int i=0; i<n; i++) {
            adjList.add(new ArrayList<Integer>());
        }

        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(roads[i][j] == 1 && i != j) {
                    adjList.get(i).add(j);
                    adjList.get(j).add(i);
                }
            }
        }

        for(int i=0; i<n; i++) {
            if(visited[i] == 0) {
                dfs(adjList, visited, i);
                count++;
            }
        }

        return count;
    }
}
