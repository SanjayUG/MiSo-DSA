/*
Problem statement
You have been given weights and values of ‘N’ items. You are also given a knapsack of size ‘W’.

Your task is to put the items in the knapsack such that the total value of items in the knapsack is maximum.

Note:
You are allowed to break the items.
Example:
If 'N = 4' and 'W = 10'. The weights and values of items are weights = [6, 1, 5, 3] and values = [3, 6, 1, 4]. 
Then the best way to fill the knapsack is to choose items with weight 6, 1 and  3. The total value of knapsack = 3 + 6 + 4 = 13.00   


*/



import java.util.* ;


import java.io.*; 
/****************************************************************

    Following is the class structure of the Pair class:

        class Pair
        {
        	int weight;
	        int value;
	        Pair(int weight, int value)
	        {
		        this.weight = weight;
		        this.value = value;
	        }
	        
        }
        
*****************************************************************/


public class Solution {
	public static class Compare implements Comparator<Pair> {
		public int compare(Pair a, Pair b) {
			int r1 = a.value * b.weight;
			int r2 = b.value * a.weight;

			return r2 - r1; 
		}
	}
    public static double maximumValue(Pair[] items, int n, int w) {
        // items contains {weight, value} pairs.
		Arrays.sort(items, new Compare());
		double maxValue = 0;
		int currWeight = 0;

		for(int i=0; i<n; i++) {
			if(currWeight + items[i].weight <= w) {
				currWeight += items[i].weight;
				maxValue += items[i].value;
			} else {
				int remainingWeight = w - currWeight;
				maxValue += items[i].value * ((double) remainingWeight / items[i].weight);
				break;
			}
		}

		return maxValue;
    }
}
