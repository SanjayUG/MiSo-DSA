public class Solution {

//     public static long getTrappedWater(long[] arr, int n) {
//         if (n <= 2) {
//             return 0;
//         } // Less than 3 elements can't trap water

//         long water = 0;

//         // Arrays to store the maximum height to the left and right of each element
//         long[] leftMax = new long[n];
//         long[] rightMax = new long[n];

//         // Initialize the first element of leftMax array
//         leftMax[0] = arr[0];
//         // Fill leftMax array with the maximum height to the left of each element
//         for (int i = 1; i < n; i++) {
//             leftMax[i] = Math.max(arr[i], leftMax[i - 1]);
//         }

//         // Initialize the last element of rightMax array
//         rightMax[n - 1] = arr[n - 1];
//         // Fill rightMax array with the maximum height to the right of each element
//         for (int i = n - 2; i >= 0; i--) {
//             rightMax[i] = Math.max(arr[i], rightMax[i + 1]);
//         }

//         // Calculate trapped water at each element
//         for (int i = 1; i < n - 1; i++) {
//             // Water trapped at each element is the minimum of the max heights to its left and right, minus the height of the element itself
//             water += Math.min(leftMax[i], rightMax[i]) - arr[i];
//         }

//         return water;
//     }

public static long getTrappedWater(long[] arr, int n) {
        if (n <= 2) return 0; // Less than 3 elements can't trap water

        long water = 0;
        int left = 0, right = n - 1;
        long leftMax = 0, rightMax = 0;

        while (left <= right) {
            if (arr[left] <= arr[right]) {
                if (arr[left] >= leftMax) {
                    leftMax = arr[left];
                } else {
                    water += leftMax - arr[left];
                }
                left++;
            } else {
                if (arr[right] >= rightMax) {
                    rightMax = arr[right];
                } else {
                    water += rightMax - arr[right];
                }
                right--;
            }
        }

        return water;
    }



}
