/*
Problem statement
Given an array ‘ARR’ and an integer ‘K’, your task is to find all the count of all sub-arrays whose sum is divisible by the given integer ‘K’.

Note:
If there exists no subarray in the given sequence whose sum is divisible by ‘K’ then simply return ‘0’.

Example:
Suppose the given array is ‘ARR’ = { 5, 0, 2, 3, 1} and ‘K = 5’.
As we can see in below image, there are a total of 6 subarrays that have the total sum divisible by ‘K’
So we return the integer 6.


*/



import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution {

    public static int subArrayCount(ArrayList < Integer > arr, int k) {
        int ans =  0;
        long sum = 0;
        HashMap<Long, Integer> map= new HashMap<>();
        map.put(sum, 1);
        for(int i=0; i<arr.size(); i++) {
            sum += arr.get(i);
            long rem = sum % k;
            if(rem < 0) {
                rem += k;
            }
            if(map.containsKey(rem)) {
                ans += map.get(rem);
                map.put(rem, map.get(rem) + 1);
            } else {
                map.put(rem, 1);
            }
        }
        return ans;
    }
    
}
