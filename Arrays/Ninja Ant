/*
Problem statement
You are given a matrix 'MAT' with ‘N’ rows and ‘N’ columns, and an ant is initially sitting on a coordinate given to you. The ant moves in an interesting way. If the ith row and jth column value are 1, it rotates 90 degrees in the right direction and moves 1 step forward. If the value at the ith row and jth column are 0, it rotates 90 degrees in the left direction and moves 1 step forward.

Your task is to find the final coordinates of the ant.

Note:

The ant initially faces toward the east side. Every time an ant moves from a block, it inverts it, i.e., changes 0 to 1 and 1 to 0.

If the ant exits the matrix just return -1,-1.
For example,

If ‘N’ = 2    
mat[2][2] = {{1, 1},
             {0, 0}}
startingRow = 0 , startingColumn = 0
moves = 1
The ant is initially facing the east side, it will take a right turn and move 1 stop in the south.    
The output will be 1 0.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
2
2 0 0 1 
1 1
0 0
2 0 0 2
1 1
0 1
Sample Output 1 :
1 0
1 1
Explanation of the Sample Input 1:
For the first test case:
The ant is initially facing the east side, will take a right turn, and move 1 stop in the south. Therefore output will be 1 0.

For the second test case:
The ant first takes a right turn and lands at (1,0). The ant takes a right turn and moves forward, coming to 1,1. Therefore the output is 1 1   
Sample Input 2 :
2
3 1 1 2
1 0 1
0 1 0
1 0 1
3 1 1 3
1 0 1
0 1 0
1 0 1
Sample Output 2 :
2 2
-1 -1


*/



import java.util.* ;
import java.io.*; 
public class Solution {
	public static ArrayList<Integer> ninjaAnt(int[][] mat, int sr, int sc, int moves) {		 
		

		ArrayList<Integer> coordinat = new ArrayList<>();
		
		int[] dr = {0, 1, 0, -1};
		int[] dc = {1, 0, -1, 0};

		int direction = 0; // 0: east, 1: south, 2: west, 3: north

		for(int i=0; i<moves; i++) {
			if(sr < 0 || sr >= mat.length || sc < 0 || sc >= mat[0].length) {
				ArrayList<Integer> result = new ArrayList<>();
				result.add(-1);
				result.add(-1);
				return result;
			}

			if(mat[sr][sc] == 1) {
				direction = (direction + 1) % 4;
				mat[sr][sc] = 0;
			} else {
				direction = (direction + 3) % 4;
				mat[sr][sc] = 1;
			}

			sr += dr[direction];
			sc += dc[direction];
		}

		if(sr < 0 || sr >= mat.length || sc < 0 || sc >= mat[0].length) {
			coordinat.add(-1);
			coordinat.add(-1);
		} else {
			coordinat.add(sr);
			coordinat.add(sc);
		}

		return coordinat;

	}
}

