/*


Problem statement
Ninja has to implement a data structure ”TRIE” from scratch. Ninja has to complete some functions.

1) Trie(): Ninja has to initialize the object of this “TRIE” data structure.

2) insert(“WORD”): Ninja has to insert the string “WORD”  into this “TRIE” data structure.

3) countWordsEqualTo(“WORD”): Ninja has to return how many times this “WORD” is present in this “TRIE”.

4) countWordsStartingWith(“PREFIX”): Ninjas have to return how many words are there in this “TRIE” that have the string “PREFIX” as a prefix.

5) erase(“WORD”): Ninja has to delete one occurrence of the string “WORD” from the “TRIE”.
Note:

1. If erase(“WORD”) function is called then it is guaranteed that the “WORD” is present in the “TRIE”.

2. If you are going to use variables with dynamic memory allocation then you need to release the memory associated with them at the end of your solution.
Can you help Ninja implement the "TRIE" data structure?

*/



import java.util.* ;
import java.io.*;

public class Trie {
    public static class Node {
        Node next[] = new Node[26];
        int endWith;
        int countPrefix;
        public Node() {
            endWith = 0;
            countPrefix = 0;
            for(int i=0; i<26; i++) {
                next[i] = null;
            }
        }
    }
    
    Node root;
    public Trie() {
        root = new Node();
    }

    public void insert(String word) {
        char ch[] = word.toCharArray();
        Node node = root;
        for(char c : ch) {
            int index = c - 'a';
            if(node.next[index] == null) {
                node.next[index] = new Node();
            }
            node = node.next[index];
            node.countPrefix += 1;
        }
        node.endWith += 1;
    }

    public int countWordsEqualTo(String word) {
        char ch[] = word.toCharArray();
        Node node = root;

        for(char c : ch) {
            if(node != null) {
                int index = c - 'a';
                node = node.next[index];
            }
        }
        if(node != null) {
            return node.endWith;
        }
        return 0;
    }

    public int countWordsStartingWith(String word) {
        char[] ch = word.toCharArray();
        Node node = root;
        for(char c : ch) {
            if(node != null) {
                int index = c - 'a';
                node = node.next[index];
            }
        }

        if(node != null) {
            return node.countPrefix;
        }
        return 0;
    }

    public void erase(String word) {
        char[] ch = word.toCharArray();
        Node node = root;
        for(char c : ch) {
            int index = c - 'a';
            node = node.next[index];
            if(node != null) {
                node.countPrefix--;
            } else {
                return;
            }
        }
        node.endWith--;
    }

}
