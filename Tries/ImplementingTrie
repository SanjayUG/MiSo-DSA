/*
Problem statement
Implement Trie Data Structure to support these operations:

insert(word) - To insert a string "word" in Trie
search(word) - To check if string "word" is present in Trie or not.
startsWith(word) - To check if there is any string in the Trie that starts with the given prefix string "word".


Three type of queries denote these operations:

Type 1: To insert a string "word" in Trie.
1 word

Type 2: To check if the string "word" is present in Trie or not.
2 word

Type 3: To check if there is any string in the Trie that starts with the given prefix string "word".
3 word

*/


public class Trie {
    public static class Node {
        Node next[] = new Node[26];
        boolean isEnd;

        Node() {
            isEnd = false;
            for(int i=0; i<26; i++) {
                next[i] = null;
            }
        }
    }
    static Node root;
    Trie() {
        root = new Node();
    }

    public static void insert(String word) {
        Node curr = root;
        int n = word.length();
        for(int i=0; i<n; i++) {
            int index = word.charAt(i) - 'a';
            if(curr.next[index] == null) {
                curr.next[index] = new Node();
            }
            curr = curr.next[index];
        }
        curr.isEnd = true;
    }

    public static boolean search(String word) {
        Node curr = root;
        int n = word.length();

        for(int i=0; i<n; i++) {
            int index = word.charAt(i) - 'a';
            if(curr.next[index] == null) {
                return false;
            }
            curr = curr.next[index];
        }

        if(curr.isEnd) {
            return true;
        }
        return false;
    }

    public static boolean startsWith(String prefix) {
        Node curr = root;
        int n = prefix.length();
        for(int i=0; i<n; i++) {
            int index = prefix.charAt(i) - 'a';
            if(curr.next[index] == null) {
                return false;
            }
            curr = curr.next[index];
        }
        return true;
    }
}
