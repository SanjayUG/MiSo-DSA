/*
Problem statement
You have to implement the pop function of Max Priority Queue and implement using a heap.

Functions :
a) push(int x) : 'x' has to be inserted in the priority queue. This has been implemented already
b) pop() : return the maximum element in the priority queue, if priority queue is empty then return '-1'.

Example:
We perform the following operations on an empty priority queue:
When operation push(5) is performed, we insert 1 in the priority queue.
When operation push(2) is performed, we insert 2 in the priority queue. 
When operation pop() is performed, we remove the maximum element from the priority queue and print which is 5.
When operation push(3) is performed, we insert 1 in the priority queue.
When operation pop() is performed, we remove the maximum element from the priority queue and print which is 3.


*/



import java.util.List;
public class Solution {
    public static int pop(List<Integer> heap) {
        if(heap.size()==0){
            return -1;
        }
        int ans=heap.get(0);
        heap.set(0,heap.get(heap.size()-1));
        heap.remove(heap.size()-1);
        if(heap.size()==0){
            return ans;
        }
        int pos=0;
        while(true){
           int left=2*pos+1;
           int right=2*pos+2;
           int leftValue=0,rightValue=0;
           if(left<heap.size()) leftValue=heap.get(left);
           if(right<heap.size()) rightValue=heap.get(right);
           if(leftValue<=heap.get(pos) && rightValue<=heap.get(pos)){
               break;
           }
           else if(leftValue>=rightValue){
               int temp=heap.get(pos);
               heap.set(pos,leftValue);
               heap.set(left,temp);
               pos=left;
           }
           else{
               int temp=heap.get(pos);
               heap.set(pos,rightValue);
               heap.set(right,temp);
               pos=right;
           }
        }
        return ans;

    }

    // Code Snippet of the push function:
    // public static void push(List<Integer> heap, int x) {
    //         heap.add(x);
    //
    //         // Position of the current inserted element.
    //         int pos = heap.size() - 1;
    //
    //         // Shifting the element up until it reaches the topmost node if it is larger than its parent.
    //         while (pos > 0) {
    //             int parent = (pos - 1) / 2;
    //             if (heap.get(pos) > heap.get(parent)) {
    //                 // Swapping the elements.
    //                 int temp = heap.get(parent);
    //                 heap.set(parent, heap.get(pos));
    //                 heap.set(pos, temp);
    //                 pos = parent;
    //             } else {
    //                 // As parent is larger, the element is now in its correct position.
    //                 break;
    //             }
    //         }
    //     }
}
