import java.util.*;

public class Solution {
    public static int[] maxSlidingWindow(int[] arr, int n, int k) {
        if (n == 0) { // Handle edge case
			return new int[0];
		}  
        
        Deque<Integer> deque = new LinkedList<>();
        int[] result = new int[n - k + 1];
        int reari = 0;

        for (int i = 0; i < n; i++) {
            // Remove elements from the front of the deque that are out of the current window
            if (!deque.isEmpty() && deque.peek() < i - k + 1) {
                deque.poll();
            }

            // Remove elements from the back of the deque that are smaller than the current element
            while (!deque.isEmpty() && arr[deque.peekLast()] < arr[i]) {
                deque.pollLast();
            }

            // Add the current element's index to the deque
            deque.offer(i);

            // Once we have a valid window (i >= k - 1), add the maximum to the result array
            if (i >= k - 1) {
                result[reari++] = arr[deque.peek()];
            }
        }

        return result;
    }
}
