/*

Problem statement
Given two strings ‘STR’ and ‘PTR’. Find all the starting indices of ‘PTR’ anagram substring in ‘STR’. Two strings are anagram if and only if one string can be converted into another string by rearranging the character.
For example, ‘ABCD’ and ‘ACBD’ are two anagram strings because ‘ACBD’ can be converted into ‘ABCD’ by rearranging the ‘B’ and ‘C’. ’ABA’ and ‘ABB’ are not anagram because we can’t convert ‘ABA’ to ‘ABB’ by rearranging the characters of particular strings.
‘ABACD’ and ‘CABAD’ are anagram because ‘ABACD’ can be converted into ‘CABAD’ by rearranging the first ‘A’ with ‘C’ and second ‘A’ with ‘B’.

Note:
Strings ‘STR’ and ‘PTR’ consist only of English uppercases.
Length of string ‘STR’ will always be greater than or equal to the length of string ‘PTR’.
The index is ‘0’ based.
In case, there is no anagram substring then return an empty sequence.


*/



import java.util.* ;
import java.io.*; 
public class Solution {
	public static ArrayList<Integer> findAnagramsIndices(String str, String ptn, int n, int m) {
		ArrayList<Integer> result = new ArrayList<>();
		int ptnFreq[] = new int[26];
		for(char c : ptn.toCharArray()) {
			ptnFreq[c - 'A']++;
		}
		int windowFreq[] = new int[26];
		for(int i=0; i<m; i++) {
			windowFreq[str.charAt(i) - 'A']++;
		}

		if(isAnagram(ptnFreq, windowFreq)) {
			result.add(0);
		}

		for(int i=m; i<n; i++) {
			windowFreq[str.charAt(i - m) - 'A']--;
			windowFreq[str.charAt(i) - 'A']++;

			if(isAnagram(ptnFreq, windowFreq)) {
				result.add(i - m + 1);
			}
		}

		return result;
	}

	private static boolean isAnagram(int[] ptnFreq, int[] windowFreq) {
		for(int i=0; i<26; i++) {
			if(ptnFreq[i] != windowFreq[i]) {
				return false;
			}
		}
		return true;
	}
}
