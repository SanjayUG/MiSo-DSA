/*

Problem statement
Design a data structure to implement deque of size ‘N’. It should support the following operations:

pushFront(X): Inserts an element X in the front of the deque. Returns true if the element is inserted, otherwise false.

pushRear(X): Inserts an element X in the back of the deque. Returns true if the element is inserted, otherwise false.

popFront(): Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.

popRear(): Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.

getFront(): Returns the first element of the deque. If the deque is empty, it returns -1.

getRear(): Returns the last element of the deque. If the deque is empty, it returns -1.

isEmpty(): Returns true if the deque is empty, otherwise false.

isFull(): Returns true if the deque is full, otherwise false.
Following types of queries denote these operations:

Type 1: for pushFront(X) operation.
Type 2: for pushRear(X) operation.
Type 3: for popFront() operation.
Type 4: for popRear() operation.
Type 5: for getFront() operation.
Type 6: for getRear() operation.
Type 7: for isEmpty() operation.
Type 8: for isFull() operation.


*/



import java.util.* ;
import java.io.*; 
public class Deque 
{
    int n;
    int[] arr;
    int front;
    int rear;
    public Deque(int n) 
    {
        this.n = n;
        front = -1;
        rear = -1;
        arr = new int[n];
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    public boolean pushFront(int x) 
    {
        if(isFull()) {
            return false;
        } else if(isEmpty()) {
            front = rear = 0;
            arr[front] = x;
        } else {
            front = (front - 1 + n) % n;
            arr[front] = x;
        }

        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    public boolean pushRear(int x) 
    {
        if(isFull()) {
            return false;
        } else if(isEmpty()) {
            front = rear = 0;
            arr[rear] = x;
        } else {
            rear = (rear + 1) % n;
            arr[rear] = x;
        }

        return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    public int popFront() 
    {
        int temp;
        if(isEmpty()) {
            return -1;
        } else if(front == rear) {
            temp = arr[front];
            front = rear = -1;
        } else {
            temp = arr[front];
            front = (front + 1) % n;
        }

        return temp;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    public int popRear() 
    {
        int temp;
        if(isEmpty()) {
            return -1;
        } else if(rear == front) {
            temp = arr[rear];
            front = rear = -1;
        } else {
            temp = arr[rear];
            rear = (rear - 1 + n) % n;
        }

        return temp;
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    public int getFront() 
    {
        if(isEmpty()) {
            return -1;
        }

        return arr[front];
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    public int getRear() 
    {
        if(isEmpty()) {
            return -1;
        }

        return arr[rear];
    }

    // Returns true if the deque is empty. Otherwise returns false.
    public boolean isEmpty() 
    {
        if(front == -1) {
            return true;
        }

        return false;
    }

    // Returns true if the deque is full. Otherwise returns false.
    public boolean isFull() 
    {
        if((rear + 1) % n == front) {
            return true;
        }

        return false;
    }
}
