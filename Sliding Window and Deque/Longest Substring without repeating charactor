/*
Problem statement
Given a string 'S' of length 'L', return the length of the longest substring without repeating characters.

Example:
Suppose given input is "abacb", then the length of the longest substring without repeating characters will be 3 ("acb").


*/



import java.util.* ;
import java.io.*; 
public class Solution 
{
	public static int uniqueSubstrings(String input) 
    {
		int n = input.length();;
		int length = 0;
		int maxCount = 0;

		HashMap<Character, Integer> map = new HashMap<>();
		
		for(int i=0; i<n; i++) {
			char ch = input.charAt(i);
			
			if(map.containsKey(ch)) {
				length = Math.max(length, map.get(ch) + 1);
			}
			map.put(ch, i);
			maxCount = Math.max(maxCount, i - length + 1);
		}

		return maxCount;
	}
}


// --------------------------


public static int uniqueSubstrings(String input) {
    int n = input.length();
    if (n <= 1) return n;
    
    // For strings known to contain only lowercase letters a-z
    int[] lastIndex = new int[26];
    Arrays.fill(lastIndex, -1);
    
    int maxLen = 0;
    int left = 0;
    
    for (int right = 0; right < n; right++) {
        char c = input.charAt(right);
        int idx = c - 'a';
        left = Math.max(left, lastIndex[idx] + 1);
        maxLen = Math.max(maxLen, right - left + 1);
        lastIndex[idx] = right;
    }
    
    return maxLen;
}
