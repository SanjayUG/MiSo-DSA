/*
Problem statement
You are given an array 'ARR' of 'N' distinct positive integers. You are also given a non-negative integer 'B'.

Your task is to return all unique combinations in the array whose sum equals 'B'. A number can be chosen any number of times from the array 'ARR'.

Elements in each combination must be in non-decreasing order.

For example:
Let the array 'ARR' be [1, 2, 3] and 'B' = 5. Then all possible valid combinations are-

(1, 1, 1, 1, 1)
(1, 1, 1, 2)
(1, 1, 3)
(1, 2, 2)
(2, 3)


*/



import java.util.ArrayList;

public class Solution 
{
    public static ArrayList<ArrayList<Integer>> findSubsetsThatSumToK(ArrayList<Integer> arr, int n, int k) 
	{
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        helper(arr, n, k, 0, new ArrayList<>(), ans);
        return ans;
    }

    public static void helper(ArrayList<Integer> arr, int n, int k, int i, ArrayList<Integer> subset, ArrayList<ArrayList<Integer>> ans) {
        if(i == n) {
            if(k == 0) {
                ans.add(new ArrayList<>(subset));
            }
            return;
        }

        //take
        subset.add(arr.get(i));
        helper(arr, n, k-arr.get(i), i+1, subset, ans);
        subset.remove(subset.size() - 1);

        //not take
        helper(arr, n, k, i+1, subset, ans);

    }
}
