/*
Problem statement
You are given an array Arr consisting of N integers. Your task is to find all the unique permutations of the given array. For e.g if the array is {1, 1, 2}, the unique permutations of this array are {1, 1, 2}, {1, 2, 1}, {2, 1, 1}. Note that the total number of permutations of {1,1,2} is equal to 6 but out of those {1,1,2} and {1,2,1} occur twice.

Note:
1. There might be duplicates present in the array.
2. The order of the permutations in the output does not matter.
3. Do not use any kind of in-built library functions to find the answer.


*/



import java.util.* ; 

public class Solution {    
    public static ArrayList<ArrayList< Integer >> uniquePermutations(ArrayList<Integer> arr, int n) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        Map<Integer,Integer> map = new HashMap<>();
        for (int i=0;i<arr.size();i++) {
            map.put(arr.get(i),map.getOrDefault(arr.get(i), 0)+1);
        }        
       LinkedList<Integer> comb = new LinkedList<>();          backtrack(comb,arr.size(),map,result);        
       return result;
    }

    static void backtrack(LinkedList<Integer> comb,int n,Map<Integer,Integer> map,ArrayList<ArrayList<Integer>> result) {
        if (comb.size()==n) {
            result.add(new ArrayList<>(comb));
            return;
        }

        for (Map.Entry<Integer,Integer> entry: map.entrySet()) {
            int num = entry.getKey();
            int value = entry.getValue();
            if (value==0) {
                continue;
            }

            comb.addLast(num);
            map.put(num,value-1);
            backtrack(comb, n, map, result);
            comb.removeLast();
            map.put(num,value);
        }
    }
}
