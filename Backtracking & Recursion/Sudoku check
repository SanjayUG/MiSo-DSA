/*
Problem statement
You have been given a 9x9 2d integer matrix 'MAT' representing a Sudoku puzzle. The empty cells of the Sudoku are filled with zeros, and the rest of the cells are filled with integers from 1 to 9. Your task is to fill all the empty cells such that the final matrix represents a Sudoku solution.

Note:
A Sudoku solution must satisfy all the following conditions-
1. Each of the digits 1-9 must occur exactly once in each row.
2. Each of the digits 1-9 must occur exactly once in each column.
3. Each of the digits 1-9 must occur exactly once in each of the 9, 3x3 sub-grids of the grid.

You can also assume that there will be only one sudoku solution for the given matrix.


Sample Input 1
3 0 6 5 0 8 4 0 0
5 2 0 0 0 0 0 0 0
0 8 7 0 0 0 0 3 1
0 0 3 0 1 0 0 8 0
9 0 0 8 6 3 0 0 5
0 5 0 0 9 0 6 0 0
1 3 0 0 0 0 2 5 0
0 0 0 0 0 0 0 7 4
0 0 5 2 0 6 3 0 0

*/



public class Solution {

	public static boolean isItSudoku(int matrix[][]) {
        return solve(matrix, 0, 0);
    }

    public static boolean solve(int board[][], int row, int col) {
        if (col == 9) {
            row++;
            col = 0;
        }

        if (row == 9) {
            return true;
        }

        // Handling given number
        if (board[row][col] != 0) {
            return solve(board, row, col + 1);
        } 

        // Handling other cells
        for (int num = 1; num <= 9; num++) {
            if (isValid(board, row, col, num)) {
                board[row][col] = num;
                if (solve(board, row, col + 1)) {
                    return true;
                }
                // Backtrack
                board[row][col] = 0;
            }
        }

        return false;
    }

    public static boolean isValid(int board[][], int row, int col, int num) {
        // Row check
        for (int j = 0; j < 9; j++) {
            if (board[row][j] == num) {
                return false;
            }
        }

        // Column check
        for (int i = 0; i < 9; i++) {
            if (board[i][col] == num) {
                return false;
            }
        }

        // Grid check
        int gRow = (row / 3) * 3;
        int gCol = (col / 3) * 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[gRow + i][gCol + j] == num) {
                    return false;
                }
            }
        }

        return true;
    }

}
